#ifndef VAL_H
#define VAL_H

#include <string>
using namespace std;

class Val {
    int        i;
    string    s;
    enum ValType { ISINT, ISSTR, ISERR } vt;
    
public:
    Val() : i(0), vt(ISERR) {}
    Val(int i) : i(i), vt(ISINT) {}
    Val(string s) : i(0), s(s), vt(ISSTR) {}
    Val(ValType vt, string errmsg) : i(0), s(errmsg), vt(ISERR) {}
    
    ValType getVt() const { return vt; }
    
    bool isErr() const { return vt == ISERR; }
    bool isInt() const { return vt == ISINT; }
    bool isStr() const { return vt == ISSTR; }
    
    int ValInt() const {
        if( isInt() ) return i;
        throw "This Val is not an Int";
    }
    string ValString() const {
        if( isStr() ) return s;
        throw "This Val is not a Str";
    }
    
    friend ostream& operator<<(ostream& out, const Val& v) {
        // IMPLEMENT
    }
    
    string GetErrMsg() const {
        if( isErr() ) return s;
        throw "This Val is not an Error";
    }
   
    Val operator+(const Val& op) const {
        if( isInt() && op.isInt() )
            return ValInt() + op.ValInt();
        if( isStr() && op.isStr() )
            return ValString() + op.ValString();
        return Val(ISERR, "Type mismatch on operands of +");
    }
    
    Val operator-(const Val& op) const {
        // IMPLEMENT
    }
    
    Val operator*(const Val& op) const {
        // IMPLEMENT
    }
    
    Val operator/(const Val& op) const {
        // IMPLEMENT
    }
    
    Val operator!() const {
         // IMPLEMENT
    }
    
};

#endif